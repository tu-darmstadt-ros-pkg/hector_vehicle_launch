<?xml version="1.0"?>

<launch>

  
  <!--  
  <arg name="rgb_camera_ns" default="arm_zoom_cam" /> 
  <arg name="rgb_image_topic" default="image_raw" /> 
  <arg name="thermal_camera_ns" default="arm_thermal_cam" /> 
  <arg name="thermal_image_topic" default="image_raw" /> 
  
  <arg name="rgb_camera_nodelet_manager_name" default="arm_zoom_cam_nodelet_manager" />
  -->
  
  
  <arg name="rgbd_camera_nodelet_manager_name" default="/arm_rgbd_cam/arm_rgbd_cam_nodelet_manager" />
  
  <arg name="rgbd_camera_ns" default="arm_rgbd_cam" />
  <arg name="rgbd_image_topic" default="rgb/image_rect_color" /> 
  
  
  <!-- R200 nodelet setup launches everything in the rgbd cam namespace, hence the complicated remapping -->  
  <node name="qrcode_detection_rgbd_camera" pkg="nodelet" type="nodelet" args="load hector_qrcode_detection/qrcode_detection $(arg rgbd_camera_nodelet_manager_name)" respawn="true">
    <remap from="$(arg rgbd_camera_ns)/image" to="$(arg rgbd_camera_ns)/$(arg rgbd_image_topic)" />
    <remap from="$(arg rgbd_camera_ns)/image_percept" to="worldmodel/image_percept" />
    <remap from="/$(arg rgbd_camera_ns)/perception/image_percept" to="/detection/visual_detection" />
  </node>
  
  <include file="$(find hector_argo_tracker_onboard_launch)/launch/start_check_rc17.launch">
    <arg name="camera_ns" default="$(arg rgbd_camera_ns)" />
    <arg name="image_topic" default="$(arg rgbd_image_topic)" />    
  </include>
  
  
  <!--Action server for measurement requests-->
  <!--<include file="$(find argo_vision_image_proc)/launch/argo_vision_image_proc.launch"/>-->
  
  <!--  
  <node pkg="nodelet" type="nodelet"
    name="zoom_cam_message_cacher" 
    args="load message_cacher_proc/CameraRelayerNodelet $(arg rgb_camera_nodelet_manager_name)" 
    output="screen"
    respawn="true">
    <param name="topic" value="/$(arg rgb_camera_ns)/$(arg rgb_image_topic)"/>    
  </node> 
  -->

  <!--Dial gauge proc-->
<!--  <include file="$(find argo_dial_gauge_proc)/launch/arm_zoom_cam.launch">
    <arg name="camera_nodelet_manager_name" value="$(arg rgb_camera_nodelet_manager_name)" />
    <arg name="rgb_camera_ns" value="$(arg rgb_camera_ns)" /> 
    <arg name="rgb_image_topic" value="$(arg rgb_image_topic)" /> 
  </include>-->

 <!--Waterlevel proc-->
<!--  <include file="$(find argo_vision_detect_waterlevel)/launch/arm_zoom_cam.launch">
    <arg name="camera_nodelet_manager_name" value="$(arg rgb_camera_nodelet_manager_name)" />
    <arg name="rgb_camera_ns" value="$(arg rgb_camera_ns)" /> 
    <arg name="rgb_image_topic" value="$(arg rgb_image_topic)" />
  </include>-->  
<!--  <include file="$(find argo_vision_detect_waterlevel_py)/launch/water_level_detection.launch">
  </include>-->

  <!--Heat proc-->
  <!--Checkpoint-->
<!--  <include file="$(find argo_hotspot_proc)/launch/arm_thermal_cam.launch">
    <arg name="rgb_camera_ns" value="$(arg rgb_camera_ns)" /> 
    <arg name="rgb_image_topic" value="$(arg rgb_image_topic)" /> 
    <arg name="thermal_camera_ns" value="$(arg thermal_camera_ns)" /> 
    <arg name="thermal_image_topic" value="$(arg thermal_image_topic)" /> 
  </include>-->
  
  <!--Continuous monitoring-->
  <!--  
  <include file="$(find argo_heat_image_translation)/launch/heat_image_translation_nodelet.launch">
    <arg name="thermal_camera_ns" value="$(arg thermal_camera_ns)" /> 
    <arg name="thermal_image_topic" value="$(arg thermal_image_topic)" /> 
  </include>-->
  
  <!--  
  <include file="$(find hector_heat_detection)/launch/argo_heat_detection_nodelet.launch">
    <arg name="thermal_camera_ns" value="$(arg thermal_camera_ns)" />   
  </include>
  -->
  
  <!--Valve proc-->
<!--  <include file="$(find argo_vision_detect_valve)/launch/valve_detector.launch">
    <arg name="rgb_camera_ns" value="$(arg rgb_camera_ns)" /> 
    <arg name="rgb_image_topic" value="$(arg rgb_image_topic)" /> 
  </include>-->
  
  <!-- realsense message_cacher -->
    <!-- rgb -->
    <!-- 
    <node pkg="nodelet" type="nodelet" name="arm_rgbd_cam_rgb_message_cacher" args="load message_cacher_proc/CameraRelayerNodelet $(arg rgbd_camera_nodelet_manager_name)"
       output="screen" respawn="true">
      <param name="topic" type="str" value="$(arg rgbd_camera_ns)/$(arg rgbd_image_topic)" />
      <param name="suffix" type="str" value="_combined" />
    </node>
    -->
    <!-- depth registered -->
    <!--    
    <node pkg="nodelet" type="nodelet" name="arm_rgbd_cam_depth_registered_message_cacher" args="load message_cacher_proc/CameraRelayerNodelet $(arg rgbd_camera_nodelet_manager_name)"
       output="screen" respawn="true">
      <param name="topic" type="str" value="/arm_rgbd_cam/depth_registered/sw_registered/image_rect_raw" />
      <param name="suffix" type="str" value="_combined" />
    </node>-->
    <!-- depth (raw) -->
    <!--
    <node pkg="nodelet" type="nodelet" name="arm_rgbd_cam_depth_message_cacher" args="load message_cacher_proc/CameraRelayerNodelet $(arg rgbd_camera_nodelet_manager_name)"
       output="screen" respawn="true">      
      <param name="topic" type="str" value="/arm_rgbd_cam/depth/image_raw" />
      <param name="suffix" type="str" value="_combined" />
    </node>-->

</launch>
